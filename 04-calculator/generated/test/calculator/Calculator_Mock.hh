/*
 *  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2024-11-02 GMT
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CGen`
 *
 *  Released under the MIT License
 *  ============================================================================
 */

/*
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#ifndef Calculator_Mock_hh__INCLUDED
#define Calculator_Mock_hh__INCLUDED

#include <Calculator_Interface.hh>

#include <gmock/gmock.h>

namespace sm
{
  namespace test
  {
    class Calculator_Mock
      : public Calculator_Interface
    {
      public:
        // The mock of the guards
        MOCK_METHOD( bool, Calculator_IsBaseZero, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData ), ( override ) );
        MOCK_METHOD( bool, Calculator_IsFractionZero, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData ), ( override ) );
        MOCK_METHOD( bool, Calculator_IsThereSpaceForExponent, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData ), ( override ) );
        MOCK_METHOD( bool, Calculator_IsExponentZero, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData ), ( override ) );
        MOCK_METHOD( bool, Calculator_HasDivisionByZeroError, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData ), ( override ) );
        MOCK_METHOD( bool, Calculator_HasOverflowError, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData ), ( override ) );
        MOCK_METHOD( bool, Calculator_IsFaulty, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData ), ( override ) );

        // The mock of the actions
        MOCK_METHOD( void, Calculator_ResetAccumulations, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_NotifyDisplayUpdate, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_CheckErrorStatus, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_ClearLastEntry, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_DrawSpliteLine, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_Additions, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_Substractions, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_Multiplications, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_Divides, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_Calculate, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_ClearFraction, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_ClearExponent, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_PushBaseDigit, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_EraseBaseDigit, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_ChangeBaseSign, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_SetFractionEntry, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_PushFractionDigit, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_EraseFractionDigit, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_RemoveZerosFromFraction, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_SetExponentEntry, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_PushExponentDigit, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_EraseExponentDigit, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_ChangeExponetSign, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_NotifyReset, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_NotifyFaultError, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_NotifyDivisionByZeroError, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
        MOCK_METHOD( void, Calculator_NotifyOverflowError, ( S_SM_Calculator_t* const smInfo, S_SM_Calculator_DataType_t const* const pInputData, S_SM_Calculator_DataType_t* const pOutputData ), ( override ) );
    }; // End Of the class `Calculator_Mock`
  } // End namespace test
} // End namespace sm

#endif // End Of Calculator_Mock_hh__INCLUDED

// End of Calculator_Mock.hh

