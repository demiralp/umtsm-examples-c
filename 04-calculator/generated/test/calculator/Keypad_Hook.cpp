/*
 *  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2024-11-02 GMT
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CGen`
 *
 *  Released under the MIT License
 *  ============================================================================
 */

/*
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "Keypad_Fixture.hh"

#include <Keypad_Auxilary.h.template>

using namespace ::sm::test;

extern "C"
{
  // The implementation of the hook function of the guards
  bool Keypad_IsReset( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsReset( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsClear( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsClear( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsBackspace( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsBackspace( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsDigit( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsDigit( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsDot( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsDot( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsExponent( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsExponent( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsPlus( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsPlus( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsMinus( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsMinus( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsMultiplay( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsMultiplay( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsDivisor( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsDivisor( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsEnter( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsEnter( smInfo, &smInfo->instanceData );
    return result;
  }

  bool Keypad_IsSignature( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInstance )
  {
    bool const result = Keypad_Fixture::GetMock( ).Keypad_IsSignature( smInfo, &smInfo->instanceData );
    return result;
  }

  // The implementation of the hook function of the actions
  void Keypad_ReadKey( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_ReadKey( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyReset( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyReset( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyClear( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyClear( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyBackspce( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyBackspce( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyDigit( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyDigit( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyDot( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyDot( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyExponent( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyExponent( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyPlus( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyPlus( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyMinus( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyMinus( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyMultiplay( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyMultiplay( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyDivisor( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyDivisor( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifyEnter( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifyEnter( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void Keypad_NotifySignatureChange( S_SM_Keypad_t* const smInfo, S_SM_Keypad_DataType_t const * const pInputData, S_SM_Keypad_DataType_t* const pOutputData )
  {
    Keypad_Fixture::GetMock( ).Keypad_NotifySignatureChange( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }
}

// End of Keypad_Hook.cpp

