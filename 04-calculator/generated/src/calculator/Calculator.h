/*
 *  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2024-11-02 GMT
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ============================================================================
 */

/*
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#ifndef Calculator_h__INCLUDED
#define Calculator_h__INCLUDED

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */
 
#include <stdbool.h>
#include <stdint.h>

#include <pthread.h>

#include <Calculator_DataType.h>

#include <Display.h>
#include <Keypad.h>

typedef enum E_Calculator_Main_States
{
  E_Calculator_init,
  E_Calculator_Main,
  E_Calculator_final
} E_Calculator_Main_States_t;

typedef enum E_Calculator_Input_States
{
  E_Calculator_Input_init,
  E_Calculator_CalculatorKeypad,
  E_Calculator_Input_final
} E_Calculator_Input_States_t;

typedef enum E_Calculator_ProcessingUnit_States
{
  E_Calculator_ProcessingUnit_init,
  E_Calculator_Process,
  E_Calculator_EnterBaseDigits,
  E_Calculator_EnterFractions,
  E_Calculator_EnterExponents,
  E_Calculator_Error,
  E_Calculator_Faulty,
  E_Calculator_DivisionByZero,
  E_Calculator_Overflow,
  E_Calculator_ProcessingUnit_final
} E_Calculator_ProcessingUnit_States_t;

typedef enum E_Calculator_Output_States
{
  E_Calculator_Output_init,
  E_Calculator_CalculatorDisplay,
  E_Calculator_Output_final
} E_Calculator_Output_States_t;

typedef enum E_Calculator_SubstateMachines
{
  E_Calculator_Self,
  E_Calculator_SubSM_CalculatorKeypad,
  E_Calculator_SubSM_CalculatorDisplay
} E_Calculator_SubstateMachines_t;

typedef struct S_SM_Calculator
{
  pthread_mutex_t guard;
  struct
  {
    E_Calculator_Main_States_t Main;
    E_Calculator_Input_States_t Input;
    E_Calculator_ProcessingUnit_States_t ProcessingUnit;
    E_Calculator_Output_States_t Output;
  } runningState;
  struct
  {
    struct
    {
      pthread_t threadHandle;
      uint8_t stack[4224U];
    } Process;
  } doFunctionHandler;
  struct
  {
    S_SM_Keypad_t CalculatorKeypad;
    S_SM_Display_t CalculatorDisplay;
  } subsm;
  S_SM_Calculator_DataType_t instanceData;
} S_SM_Calculator_t;

void Calculator_Initialize( S_SM_Calculator_t* const pStateMachine );
void Calculator_Deinitialize( S_SM_Calculator_t* const pStateMachine );

void Calculator_Start( S_SM_Calculator_t* pStateMachine );

bool Calculator_IsIn_Main_Region( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_Input_Region( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_ProcessingUnit_Region( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_Output_Region( S_SM_Calculator_t* const pStateMachine );

bool Calculator_IsIn_Main_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_CalculatorKeypad_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_Process_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_EnterBaseDigits_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_EnterFractions_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_EnterExponents_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_Error_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_Faulty_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_DivisionByZero_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_Overflow_State( S_SM_Calculator_t* const pStateMachine );
bool Calculator_IsIn_CalculatorDisplay_State( S_SM_Calculator_t* const pStateMachine );

void Calculator_Run_Backspace( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_ChangeSign( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Clear( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Digit( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Division( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_DivisionByZero( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Dot( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Enter( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Exponents( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Faulty( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Minus( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Multiplay( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Notify( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Overflow( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Plus( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Reset( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_SwitchOff( S_SM_Calculator_t* pStateMachine );
void Calculator_Run_Update( S_SM_Calculator_t* pStateMachine );

S_SM_Calculator_DataType_t* Calculator_GetData( S_SM_Calculator_t* const pStateMachine );

S_SM_Keypad_DataType_t* Calculator_GetSMData_CalculatorKeypad( S_SM_Calculator_t* const pStateMachine );
S_SM_Display_DataType_t* Calculator_GetSMData_CalculatorDisplay( S_SM_Calculator_t* const pStateMachine );

S_SM_Keypad_t* Calculator_GetSubSM_CalculatorKeypad( S_SM_Calculator_t* const pStateMachine );
S_SM_Display_t* Calculator_GetSubSM_CalculatorDisplay( S_SM_Calculator_t* const pStateMachine );

void Calculator_SubSM_Run_Backspace( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_ChangeSign( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Clear( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Digit( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Division( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_DivisionByZero( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Dot( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Enter( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Exponents( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Faulty( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Minus( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Multiplay( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Notify( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Overflow( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Plus( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Reset( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_SwitchOff( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );
void Calculator_SubSM_Run_Update( S_SM_Calculator_t* pStateMachine, E_Calculator_SubstateMachines_t subsm );

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* Calculator_h__INCLUDED */

/* End of Calculator.h */
