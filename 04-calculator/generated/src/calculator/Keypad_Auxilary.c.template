/*
 *  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2024-11-02 GMT
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *  
 *  This file is generated by UMTSM using the code generator `CGen`
 *  
 *  Released under the MIT License
 *  ============================================================================
 */

/*
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "Keypad_Auxilary.h"

#include <assert.h>
#include <memory.h>
#include <pthread.h>
#include <signal.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdlib.h>
#include <unistd.h>

/* The implementation of the guards */
bool Keypad_IsBackspace(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsBackspace */

bool Keypad_IsClear(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsClear */

bool Keypad_IsDigit(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsDigit */

bool Keypad_IsDivisor(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsDivisor */

bool Keypad_IsDot(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsDot */

bool Keypad_IsEnter(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsEnter */

bool Keypad_IsExponent(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsExponent */

bool Keypad_IsMinus(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsMinus */

bool Keypad_IsMultiplay(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsMultiplay */

bool Keypad_IsPlus(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsPlus */

bool Keypad_IsReset(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsReset */

bool Keypad_IsSignature(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInstance )
{
  bool const result = false;
  return result;
} /* End of guard function: Keypad_IsSignature */

/* The implementation of the actions */
void Keypad_NotifyBackspce(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyBackspce */

void Keypad_NotifyClear(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyClear */

void Keypad_NotifyDigit(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyDigit */

void Keypad_NotifyDivisor(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyDivisor */

void Keypad_NotifyDot(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyDot */

void Keypad_NotifyEnter(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyEnter */

void Keypad_NotifyExponent(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyExponent */

void Keypad_NotifyMinus(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyMinus */

void Keypad_NotifyMultiplay(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyMultiplay */

void Keypad_NotifyPlus(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyPlus */

void Keypad_NotifyReset(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifyReset */

void Keypad_NotifySignatureChange(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_NotifySignatureChange */

void Keypad_ReadKey(
  __attribute__( ( unused ) ) S_SM_Keypad_t* const smInfo,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t const * const pInputData,
  __attribute__( ( unused ) ) S_SM_Keypad_DataType_t * const pOutputData )
{
} /* End of action function: Keypad_ReadKey */

/* End of Keypad_Auxilary.c */
