/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-03-19 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#ifndef Paroot_h__INCLUDED
#define Paroot_h__INCLUDED

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */
 
#include <stdbool.h>
#include <stdint.h>

#include <pthread.h>

#include <Paroot_DataType.h>

typedef enum E_Paroot_Main_States
{
  E_Paroot_init,
  E_Paroot_Main,
  E_Paroot_Read,
  E_Paroot_ReadA,
  E_Paroot_ReadB,
  E_Paroot_ReadC,
  E_Paroot_Solve,
  E_Paroot_Report,
  E_Paroot_ComplexSolution,
  E_Paroot_SingleSolution,
  E_Paroot_Solutions,
  E_Paroot_final
} E_Paroot_Main_States_t;

typedef struct S_SM_Paroot
{
  pthread_mutex_t guard;
  struct
  {
    E_Paroot_Main_States_t Main;
  } runningState;
  struct
  {
    union
    {
      union
      {
        struct
        {
          pthread_t threadHandle;
          uint8_t stack[4224U];
        } ReadA;
        struct
        {
          pthread_t threadHandle;
          uint8_t stack[4224U];
        } ReadB;
        struct
        {
          pthread_t threadHandle;
          uint8_t stack[4224U];
        } ReadC;
      };
      struct
      {
        pthread_t threadHandle;
        uint8_t stack[4224U];
      } Solve;
      union
      {
        struct
        {
          pthread_t threadHandle;
          uint8_t stack[4224U];
        } ComplexSolution;
        struct
        {
          pthread_t threadHandle;
          uint8_t stack[4224U];
        } SingleSolution;
        struct
        {
          pthread_t threadHandle;
          uint8_t stack[4224U];
        } Solutions;
      };
    };
  } doFunctionHandler;
  S_SM_Paroot_DataType_t instanceData;
} S_SM_Paroot_t;

void Paroot_Initialize( S_SM_Paroot_t* const pStateMachine );
void Paroot_Deinitialize( S_SM_Paroot_t* const pStateMachine );

void Paroot_Start( S_SM_Paroot_t* pStateMachine );

bool Paroot_IsIn_Main_Region( S_SM_Paroot_t* const pStateMachine );

bool Paroot_IsIn_Main_State( S_SM_Paroot_t* const pStateMachine );
bool Paroot_IsIn_Read_State( S_SM_Paroot_t* const pStateMachine );
bool Paroot_IsIn_ReadA_State( S_SM_Paroot_t* const pStateMachine );
bool Paroot_IsIn_ReadB_State( S_SM_Paroot_t* const pStateMachine );
bool Paroot_IsIn_ReadC_State( S_SM_Paroot_t* const pStateMachine );
bool Paroot_IsIn_Solve_State( S_SM_Paroot_t* const pStateMachine );
bool Paroot_IsIn_Report_State( S_SM_Paroot_t* const pStateMachine );
bool Paroot_IsIn_ComplexSolution_State( S_SM_Paroot_t* const pStateMachine );
bool Paroot_IsIn_SingleSolution_State( S_SM_Paroot_t* const pStateMachine );
bool Paroot_IsIn_Solutions_State( S_SM_Paroot_t* const pStateMachine );

S_SM_Paroot_DataType_t* Paroot_GetData( S_SM_Paroot_t* const pStateMachine );

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* Paroot_h__INCLUDED */

/* End of Paroot.h */
