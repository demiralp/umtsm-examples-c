/*
 *  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2024-12-03 GMT
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *  
 *  This file is generated by UMTSM using the code generator `CGen`
 *  
 *  Released under the MIT License
 *  ============================================================================
 */

/*
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "ExecutionDirector_Fixture.hh"

#include <ExecutionDirector_Auxilary.h.template>

using namespace ::sm::test;

extern "C"
{
  // The implementation of the hook function of the guards
  bool ExecutionDirector_IsControlledModeRequested( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance )
  {
    bool const result = ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_IsControlledModeRequested( smInfo, &smInfo->instanceData );
    return result;
  }

  bool ExecutionDirector_IsUncontrolledModeRequested( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance )
  {
    bool const result = ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_IsUncontrolledModeRequested( smInfo, &smInfo->instanceData );
    return result;
  }

  bool ExecutionDirector_IsNextLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance )
  {
    bool const result = ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_IsNextLane2( smInfo, &smInfo->instanceData );
    return result;
  }

  bool ExecutionDirector_IsNextLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance )
  {
    bool const result = ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_IsNextLane3( smInfo, &smInfo->instanceData );
    return result;
  }

  bool ExecutionDirector_IsNextLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance )
  {
    bool const result = ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_IsNextLane4( smInfo, &smInfo->instanceData );
    return result;
  }

  bool ExecutionDirector_IsNextLanePedestrianLanes( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance )
  {
    bool const result = ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_IsNextLanePedestrianLanes( smInfo, &smInfo->instanceData );
    return result;
  }

  bool ExecutionDirector_IsNextLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance )
  {
    bool const result = ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_IsNextLane1( smInfo, &smInfo->instanceData );
    return result;
  }

  // The implementation of the hook function of the actions
  void ExecutionDirector_StopTraffic( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_StopTraffic( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_DisableSystem( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_DisableSystem( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_NotifyCrossroad( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_NotifyCrossroad( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_EnableSystem( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_EnableSystem( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_ClearControlMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_ClearControlMode( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetControlledMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetControlledMode( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetUncontrolledMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetUncontrolledMode( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_StartSystemSwitchingTimer( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_StartSystemSwitchingTimer( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_WaitForSystemSwitchingTimer( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_WaitForSystemSwitchingTimer( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_WaitForTrafficStops( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_WaitForTrafficStops( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_StartUncontrolMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_StartUncontrolMode( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_CheckRouteRequest( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_CheckRouteRequest( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_Update( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_Update( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_WaitForInterval( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_WaitForInterval( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_StartControlMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_StartControlMode( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_OrderOpenLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_OrderOpenLane1( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_WaitForLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_WaitForLane1( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_PrepareForNextLane( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_PrepareForNextLane( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_WaitForNextLaneOpen( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_WaitForNextLaneOpen( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_OrderOpenLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_OrderOpenLane2( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_WaitForLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_WaitForLane2( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_OrderOpenLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_OrderOpenLane3( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_WaitForLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_WaitForLane3( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_OrderOpenLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_OrderOpenLane4( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_WaitForLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_WaitForLane4( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_OrderOpenPedestrianLanes( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_OrderOpenPedestrianLanes( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_WaitForPedestrians( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_WaitForPedestrians( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetNextOpenLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetNextOpenLane1( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetNextOpenLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetNextOpenLane2( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetNextOpenLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetNextOpenLane3( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetNextOpenLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetNextOpenLane4( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetNextOpenLanePedestrianLanes( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetNextOpenLanePedestrianLanes( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetDisableLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetDisableLane1( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetDisableLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetDisableLane2( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetDisableLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetDisableLane3( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetDisableLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetDisableLane4( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetEnableLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetEnableLane1( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetEnableLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetEnableLane2( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetEnableLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetEnableLane3( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  void ExecutionDirector_SetEnableLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t* const pOutputData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_SetEnableLane4( smInfo, &smInfo->instanceData, &smInfo->instanceData );
  }

  // The implementation of the hook function to load and store persistent histories
  void ExecutionDirector_Store_Shallow_Operational( E_ExecutionDirector_Main_States_t state, S_SM_ExecutionDirector_DataType_t * const pInstanceData )
  {
    ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_Store_Shallow_Operational( state, pInstanceData );
  }

  E_ExecutionDirector_Main_States_t ExecutionDirector_Load_Shallow_Operational( S_SM_ExecutionDirector_DataType_t * const pInstanceData )
  {
    E_ExecutionDirector_Main_States_t const result = ExecutionDirector_Fixture::GetMock( ).ExecutionDirector_Load_Shallow_Operational( pInstanceData );
    return result;
  }
}

// End of ExecutionDirector_Hook.cpp

