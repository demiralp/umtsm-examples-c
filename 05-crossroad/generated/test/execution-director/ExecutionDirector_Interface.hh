/*
 *  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2024-12-03 GMT
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CGen`
 *
 *  Released under the MIT License
 *  ============================================================================
 */

/*
 *  Copyright (C) 2023-2024 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#ifndef ExecutionDirector_Interface_hh__INCLUDED
#define ExecutionDirector_Interface_hh__INCLUDED

#include <ExecutionDirector.h>

namespace sm
{
  namespace test
  {
    class ExecutionDirector_Interface
    {
      public:
        virtual ~ExecutionDirector_Interface( );

        // The mock interface of the guards
        virtual bool ExecutionDirector_IsControlledModeRequested( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance ) = 0;
        virtual bool ExecutionDirector_IsUncontrolledModeRequested( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance ) = 0;
        virtual bool ExecutionDirector_IsNextLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance ) = 0;
        virtual bool ExecutionDirector_IsNextLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance ) = 0;
        virtual bool ExecutionDirector_IsNextLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance ) = 0;
        virtual bool ExecutionDirector_IsNextLanePedestrianLanes( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance ) = 0;
        virtual bool ExecutionDirector_IsNextLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInstance ) = 0;

        // The mock interface of the actions
        virtual void ExecutionDirector_StopTraffic( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_DisableSystem( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_NotifyCrossroad( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_EnableSystem( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_ClearControlMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetControlledMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetUncontrolledMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_StartSystemSwitchingTimer( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_WaitForSystemSwitchingTimer( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_WaitForTrafficStops( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_StartUncontrolMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_CheckRouteRequest( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_Update( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_WaitForInterval( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_StartControlMode( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_OrderOpenLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_WaitForLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_PrepareForNextLane( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_WaitForNextLaneOpen( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_OrderOpenLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_WaitForLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_OrderOpenLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_WaitForLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_OrderOpenLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_WaitForLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_OrderOpenPedestrianLanes( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_WaitForPedestrians( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetNextOpenLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetNextOpenLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetNextOpenLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetNextOpenLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetNextOpenLanePedestrianLanes( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetDisableLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetDisableLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetDisableLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetDisableLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetEnableLane1( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetEnableLane2( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetEnableLane3( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;
        virtual void ExecutionDirector_SetEnableLane4( S_SM_ExecutionDirector_t* const smInfo, S_SM_ExecutionDirector_DataType_t const * const pInputData, S_SM_ExecutionDirector_DataType_t * const pOutputData ) = 0;

        // The mock interface of the function to load and store persistent histories
        virtual void ExecutionDirector_Store_Shallow_Operational( E_ExecutionDirector_Main_States_t state, S_SM_ExecutionDirector_DataType_t* const pInstance ) = 0;
        virtual E_ExecutionDirector_Main_States_t ExecutionDirector_Load_Shallow_Operational( S_SM_ExecutionDirector_DataType_t* const pInstance ) = 0;
    }; // End Of the class `ExecutionDirector_Interface`
  } // End namespace test
} // End namespace sm

#endif // End Of ExecutionDirector_Interface_hh__INCLUDED

// End of ExecutionDirector_Interface.hh

