/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-03-19 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#ifndef TrafficLight_h__INCLUDED
#define TrafficLight_h__INCLUDED

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */
 
#include <stdbool.h>
#include <stdint.h>

#include <pthread.h>

#include <TrafficLight_DataType.h>

typedef enum E_TrafficLight_Main_States
{
  E_TrafficLight_init,
  E_TrafficLight_Main,
  E_TrafficLight_final
} E_TrafficLight_Main_States_t;

typedef enum E_TrafficLight_Top_States
{
  E_TrafficLight_Top_init,
  E_TrafficLight_Red,
  E_TrafficLight_Red_Off,
  E_TrafficLight_Red_Off_Flashing,
  E_TrafficLight_Red_On,
  E_TrafficLight_Red_On_Flashing,
  E_TrafficLight_Top_Black,
  E_TrafficLight_Top_final
} E_TrafficLight_Top_States_t;

typedef enum E_TrafficLight_Middle_States
{
  E_TrafficLight_Middle_init,
  E_TrafficLight_Amber,
  E_TrafficLight_Amber_Off,
  E_TrafficLight_Amber_Off_Flashing,
  E_TrafficLight_Amber_On,
  E_TrafficLight_Amber_On_Flashing,
  E_TrafficLight_Middle_Black,
  E_TrafficLight_Middle_final
} E_TrafficLight_Middle_States_t;

typedef enum E_TrafficLight_Bottom_States
{
  E_TrafficLight_Bottom_init,
  E_TrafficLight_Green,
  E_TrafficLight_Green_Off,
  E_TrafficLight_Green_Off_Flashing,
  E_TrafficLight_Green_On,
  E_TrafficLight_Green_On_Flashing,
  E_TrafficLight_Bottom_Black,
  E_TrafficLight_Bottom_final
} E_TrafficLight_Bottom_States_t;

typedef struct S_SM_TrafficLight
{
  pthread_mutex_t guard;
  struct
  {
    E_TrafficLight_Main_States_t Main;
    E_TrafficLight_Top_States_t Top;
    E_TrafficLight_Middle_States_t Middle;
    E_TrafficLight_Bottom_States_t Bottom;
  } runningState;
  struct
  {
    union
    {
      struct
      {
        pthread_t threadHandle;
        uint8_t stack[4224U];
      } Red_Off_Flashing;
      struct
      {
        pthread_t threadHandle;
        uint8_t stack[4224U];
      } Red_On_Flashing;
    };
    union
    {
      struct
      {
        pthread_t threadHandle;
        uint8_t stack[4224U];
      } Amber_Off_Flashing;
      struct
      {
        pthread_t threadHandle;
        uint8_t stack[4224U];
      } Amber_On_Flashing;
    };
    union
    {
      struct
      {
        pthread_t threadHandle;
        uint8_t stack[4224U];
      } Green_Off_Flashing;
      struct
      {
        pthread_t threadHandle;
        uint8_t stack[4224U];
      } Green_On_Flashing;
    };
  } doFunctionHandler;
  S_SM_TrafficLight_DataType_t instanceData;
} S_SM_TrafficLight_t;

void TrafficLight_Initialize( S_SM_TrafficLight_t* const pStateMachine );
void TrafficLight_Deinitialize( S_SM_TrafficLight_t* const pStateMachine );

void TrafficLight_Start( S_SM_TrafficLight_t* pStateMachine );

bool TrafficLight_IsIn_Main_Region( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Top_Region( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Middle_Region( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Bottom_Region( S_SM_TrafficLight_t* const pStateMachine );

bool TrafficLight_IsIn_Main_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Red_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Red_Off_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Red_Off_Flashing_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Red_On_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Red_On_Flashing_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Top_Black_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Amber_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Amber_Off_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Amber_Off_Flashing_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Amber_On_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Amber_On_Flashing_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Middle_Black_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Green_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Green_Off_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Green_Off_Flashing_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Green_On_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Green_On_Flashing_State( S_SM_TrafficLight_t* const pStateMachine );
bool TrafficLight_IsIn_Bottom_Black_State( S_SM_TrafficLight_t* const pStateMachine );

void TrafficLight_Run_Check( S_SM_TrafficLight_t* pStateMachine );
void TrafficLight_Run_SystemDisabled( S_SM_TrafficLight_t* pStateMachine );
void TrafficLight_Run_SystemEnabled( S_SM_TrafficLight_t* pStateMachine );

S_SM_TrafficLight_DataType_t* TrafficLight_GetData( S_SM_TrafficLight_t* const pStateMachine );

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* TrafficLight_h__INCLUDED */

/* End of TrafficLight.h */
